define("mock-contracts/contracts/MockAMMFactory.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='mock-contracts/contracts/MockAMMFactory.json.ts'/> 
    exports.default = {
        "abi": [
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "contract IERC20", "name": "token0", "type": "address" }, { "indexed": true, "internalType": "contract IERC20", "name": "token1", "type": "address" }, { "indexed": false, "internalType": "contract MockAMMPair", "name": "pair", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "newSize", "type": "uint256" }], "name": "PairCreated", "type": "event" },
            { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "allPairs", "outputs": [{ "internalType": "contract MockAMMPair", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "allPairsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "contract IERC20", "name": "token0", "type": "address" }, { "internalType": "contract IERC20", "name": "token1", "type": "address" }], "name": "createPair", "outputs": [{ "internalType": "contract MockAMMPair", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "608060405234801561001057600080fd5b50611290806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631e3dd18b14610046578063574f2ba314610083578063c9c6539614610094575b600080fd5b61005961005436600461022c565b6100a7565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b60015460405190815260200161007a565b6100596100a236600461026e565b6100de565b600181815481106100b757600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600082826040516100ee9061021f565b73ffffffffffffffffffffffffffffffffffffffff928316815291166020820152604001604051809103906000f08015801561012e573d6000803e3d6000fd5b506001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601805473ffffffffffffffffffffffffffffffffffffffff8481167fffffffffffffffffffffffff00000000000000000000000000000000000000009283168117909355878116600081815260208181526040808320948b168084529482528083208054871688179055828252808320848452825291829020805490951686179094559454855194855292840192909252939450917f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a392915050565b610fb9806102a283390190565b60006020828403121561023e57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461026957600080fd5b919050565b6000806040838503121561028157600080fd5b61028a83610245565b915061029860208401610245565b9050925092905056fe60c060405234801561001057600080fd5b50604051610fb9380380610fb983398101604081905261002f91610094565b6001600160a01b038216158015906100585750806001600160a01b0316826001600160a01b0316105b61006157600080fd5b6001600160a01b039182166080521660a0526100c7565b80516001600160a01b038116811461008f57600080fd5b919050565b600080604083850312156100a757600080fd5b6100b083610078565b91506100be60208401610078565b90509250929050565b60805160a051610e95610124600039600081816102360152818161038a0152818161047d0152818161057301526106fd01526000818161012d015281816102a5015281816104360152818161053101526106100152610e956000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80635a76f25e11610076578063c5700a021161005b578063c5700a02146101ec578063d21220a714610231578063fff6cae91461025857600080fd5b80635a76f25e146101ad5780639cd441da146101d957600080fd5b8063022c0d9f146100a85780630902f1ac146100bd5780630dfe168114610128578063443cb4bc14610174575b600080fd5b6100bb6100b6366004610c82565b610260565b005b600054604080516dffffffffffffffffffffffffffff80841682526e01000000000000000000000000000084041660208201527c010000000000000000000000000000000000000000000000000000000090920463ffffffff16908201526060015b60405180910390f35b61014f7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161011f565b60005461018e906dffffffffffffffffffffffffffff1681565b6040516dffffffffffffffffffffffffffff909116815260200161011f565b60005461018e906e01000000000000000000000000000090046dffffffffffffffffffffffffffff1681565b6100bb6101e7366004610d31565b610517565b60005461021c907c0100000000000000000000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff909116815260200161011f565b61014f7f000000000000000000000000000000000000000000000000000000000000000081565b6100bb6105e2565b600080546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526dffffffffffffffffffffffffffff909116907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610301573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103259190610d53565b61032f9190610d6c565b600080546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015292935090916e0100000000000000000000000000009091046dffffffffffffffffffffffffffff16907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040a9190610d53565b6104149190610d6c565b9050861561045d5761045d73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168689610832565b85156104a4576104a473ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168688610832565b60408051838152602081018390529081018890526060810187905273ffffffffffffffffffffffffffffffffffffffff86169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a361050e6105e2565b50505050505050565b61055973ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633308561090b565b61059b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633308461090b565b604080518381526020810183905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a26105de6105e2565b5050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa15801561066c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106909190610d53565b600080547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff929092169190911790556040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d9190610d53565b600080546dffffffffffffffffffffffffffff9081166e01000000000000000000000000000093821684027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16177c01000000000000000000000000000000000000000000000000000000004263ffffffff16021791829055604080518383168152939092041660208301527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526109069084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261096f565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526109699085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610884565b50505050565b60006109d1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610a809092919063ffffffff16565b80519091501561090657808060200190518101906109ef9190610dac565b610906576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6060610a8f8484600085610a99565b90505b9392505050565b606082471015610b2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a77565b73ffffffffffffffffffffffffffffffffffffffff85163b610ba9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a77565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610bd29190610df2565b60006040518083038185875af1925050503d8060008114610c0f576040519150601f19603f3d011682016040523d82523d6000602084013e610c14565b606091505b5091509150610c24828286610c2f565b979650505050505050565b60608315610c3e575081610a92565b825115610c4e5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a779190610e0e565b600080600080600060808688031215610c9a57600080fd5b8535945060208601359350604086013573ffffffffffffffffffffffffffffffffffffffff81168114610ccc57600080fd5b9250606086013567ffffffffffffffff80821115610ce957600080fd5b818801915088601f830112610cfd57600080fd5b813581811115610d0c57600080fd5b896020828501011115610d1e57600080fd5b9699959850939650602001949392505050565b60008060408385031215610d4457600080fd5b50508035926020909101359150565b600060208284031215610d6557600080fd5b5051919050565b81810381811115610da6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b600060208284031215610dbe57600080fd5b81518015158114610a9257600080fd5b60005b83811015610de9578181015183820152602001610dd1565b50506000910152565b60008251610e04818460208701610dce565b9190910192915050565b6020815260008251806020840152610e2d816040850160208701610dce565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212202b05060a67613acdc7cf8e4bd68c6ab79eff179f4333611b4b3a54749db7ca9f64736f6c63430008110033a2646970667358221220a3c7bba2097b044e7588759fcc917f67acec35ba48158b69aba33d05c526d92e64736f6c63430008110033"
    };
});
define("mock-contracts/contracts/MockAMMFactory.ts", ["require", "exports", "@ijstech/eth-contract", "mock-contracts/contracts/MockAMMFactory.json.ts"], function (require, exports, eth_contract_1, MockAMMFactory_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MockAMMFactory = void 0;
    class MockAMMFactory extends eth_contract_1.Contract {
        constructor(wallet, address) {
            super(wallet, address, MockAMMFactory_json_1.default.abi, MockAMMFactory_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        parsePairCreatedEvent(receipt) {
            return this.parseEvents(receipt, "PairCreated").map(e => this.decodePairCreatedEvent(e));
        }
        decodePairCreatedEvent(event) {
            let result = event.data;
            return {
                token0: result.token0,
                token1: result.token1,
                pair: result.pair,
                newSize: new eth_contract_1.BigNumber(result.newSize),
                _event: event
            };
        }
        assign() {
            let allPairs_call = async (param1, options) => {
                let result = await this.call('allPairs', [this.wallet.utils.toString(param1)], options);
                return result;
            };
            this.allPairs = allPairs_call;
            let allPairsLength_call = async (options) => {
                let result = await this.call('allPairsLength', [], options);
                return new eth_contract_1.BigNumber(result);
            };
            this.allPairsLength = allPairsLength_call;
            let createPairParams = (params) => [params.token0, params.token1];
            let createPair_send = async (params, options) => {
                let result = await this.send('createPair', createPairParams(params), options);
                return result;
            };
            let createPair_call = async (params, options) => {
                let result = await this.call('createPair', createPairParams(params), options);
                return result;
            };
            this.createPair = Object.assign(createPair_send, {
                call: createPair_call
            });
        }
    }
    MockAMMFactory._abi = MockAMMFactory_json_1.default.abi;
    exports.MockAMMFactory = MockAMMFactory;
});
define("mock-contracts/contracts/MockAMMPair.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='mock-contracts/contracts/MockAMMPair.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "contract IERC20", "name": "_token0", "type": "address" }, { "internalType": "contract IERC20", "name": "_token1", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount0", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount1", "type": "uint256" }], "name": "Mint", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount0In", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount1In", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount0Out", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount1Out", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }], "name": "Swap", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint112", "name": "reserve0", "type": "uint112" }, { "indexed": false, "internalType": "uint112", "name": "reserve1", "type": "uint112" }], "name": "Sync", "type": "event" },
            { "inputs": [{ "internalType": "uint256", "name": "amount0In", "type": "uint256" }, { "internalType": "uint256", "name": "amount1In", "type": "uint256" }], "name": "addLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "blockTimestampLast", "outputs": [{ "internalType": "uint32", "name": "", "type": "uint32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "getReserves", "outputs": [{ "internalType": "uint112", "name": "_reserve0", "type": "uint112" }, { "internalType": "uint112", "name": "_reserve1", "type": "uint112" }, { "internalType": "uint32", "name": "_blockTimestampLast", "type": "uint32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "reserve0", "outputs": [{ "internalType": "uint112", "name": "", "type": "uint112" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "reserve1", "outputs": [{ "internalType": "uint112", "name": "", "type": "uint112" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amount0Out", "type": "uint256" }, { "internalType": "uint256", "name": "amount1Out", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "swap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "sync", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "token0", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "token1", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "60c060405234801561001057600080fd5b50604051610fb9380380610fb983398101604081905261002f91610094565b6001600160a01b038216158015906100585750806001600160a01b0316826001600160a01b0316105b61006157600080fd5b6001600160a01b039182166080521660a0526100c7565b80516001600160a01b038116811461008f57600080fd5b919050565b600080604083850312156100a757600080fd5b6100b083610078565b91506100be60208401610078565b90509250929050565b60805160a051610e95610124600039600081816102360152818161038a0152818161047d0152818161057301526106fd01526000818161012d015281816102a5015281816104360152818161053101526106100152610e956000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80635a76f25e11610076578063c5700a021161005b578063c5700a02146101ec578063d21220a714610231578063fff6cae91461025857600080fd5b80635a76f25e146101ad5780639cd441da146101d957600080fd5b8063022c0d9f146100a85780630902f1ac146100bd5780630dfe168114610128578063443cb4bc14610174575b600080fd5b6100bb6100b6366004610c82565b610260565b005b600054604080516dffffffffffffffffffffffffffff80841682526e01000000000000000000000000000084041660208201527c010000000000000000000000000000000000000000000000000000000090920463ffffffff16908201526060015b60405180910390f35b61014f7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161011f565b60005461018e906dffffffffffffffffffffffffffff1681565b6040516dffffffffffffffffffffffffffff909116815260200161011f565b60005461018e906e01000000000000000000000000000090046dffffffffffffffffffffffffffff1681565b6100bb6101e7366004610d31565b610517565b60005461021c907c0100000000000000000000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff909116815260200161011f565b61014f7f000000000000000000000000000000000000000000000000000000000000000081565b6100bb6105e2565b600080546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526dffffffffffffffffffffffffffff909116907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610301573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103259190610d53565b61032f9190610d6c565b600080546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015292935090916e0100000000000000000000000000009091046dffffffffffffffffffffffffffff16907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040a9190610d53565b6104149190610d6c565b9050861561045d5761045d73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168689610832565b85156104a4576104a473ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168688610832565b60408051838152602081018390529081018890526060810187905273ffffffffffffffffffffffffffffffffffffffff86169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a361050e6105e2565b50505050505050565b61055973ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633308561090b565b61059b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633308461090b565b604080518381526020810183905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a26105de6105e2565b5050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa15801561066c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106909190610d53565b600080547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff929092169190911790556040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d9190610d53565b600080546dffffffffffffffffffffffffffff9081166e01000000000000000000000000000093821684027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16177c01000000000000000000000000000000000000000000000000000000004263ffffffff16021791829055604080518383168152939092041660208301527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526109069084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261096f565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526109699085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610884565b50505050565b60006109d1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610a809092919063ffffffff16565b80519091501561090657808060200190518101906109ef9190610dac565b610906576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6060610a8f8484600085610a99565b90505b9392505050565b606082471015610b2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a77565b73ffffffffffffffffffffffffffffffffffffffff85163b610ba9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a77565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610bd29190610df2565b60006040518083038185875af1925050503d8060008114610c0f576040519150601f19603f3d011682016040523d82523d6000602084013e610c14565b606091505b5091509150610c24828286610c2f565b979650505050505050565b60608315610c3e575081610a92565b825115610c4e5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a779190610e0e565b600080600080600060808688031215610c9a57600080fd5b8535945060208601359350604086013573ffffffffffffffffffffffffffffffffffffffff81168114610ccc57600080fd5b9250606086013567ffffffffffffffff80821115610ce957600080fd5b818801915088601f830112610cfd57600080fd5b813581811115610d0c57600080fd5b896020828501011115610d1e57600080fd5b9699959850939650602001949392505050565b60008060408385031215610d4457600080fd5b50508035926020909101359150565b600060208284031215610d6557600080fd5b5051919050565b81810381811115610da6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b600060208284031215610dbe57600080fd5b81518015158114610a9257600080fd5b60005b83811015610de9578181015183820152602001610dd1565b50506000910152565b60008251610e04818460208701610dce565b9190910192915050565b6020815260008251806020840152610e2d816040850160208701610dce565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212202b05060a67613acdc7cf8e4bd68c6ab79eff179f4333611b4b3a54749db7ca9f64736f6c63430008110033"
    };
});
define("mock-contracts/contracts/MockAMMPair.ts", ["require", "exports", "@ijstech/eth-contract", "mock-contracts/contracts/MockAMMPair.json.ts"], function (require, exports, eth_contract_2, MockAMMPair_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MockAMMPair = void 0;
    class MockAMMPair extends eth_contract_2.Contract {
        constructor(wallet, address) {
            super(wallet, address, MockAMMPair_json_1.default.abi, MockAMMPair_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.token0, params.token1], options);
        }
        parseMintEvent(receipt) {
            return this.parseEvents(receipt, "Mint").map(e => this.decodeMintEvent(e));
        }
        decodeMintEvent(event) {
            let result = event.data;
            return {
                sender: result.sender,
                amount0: new eth_contract_2.BigNumber(result.amount0),
                amount1: new eth_contract_2.BigNumber(result.amount1),
                _event: event
            };
        }
        parseSwapEvent(receipt) {
            return this.parseEvents(receipt, "Swap").map(e => this.decodeSwapEvent(e));
        }
        decodeSwapEvent(event) {
            let result = event.data;
            return {
                sender: result.sender,
                amount0In: new eth_contract_2.BigNumber(result.amount0In),
                amount1In: new eth_contract_2.BigNumber(result.amount1In),
                amount0Out: new eth_contract_2.BigNumber(result.amount0Out),
                amount1Out: new eth_contract_2.BigNumber(result.amount1Out),
                to: result.to,
                _event: event
            };
        }
        parseSyncEvent(receipt) {
            return this.parseEvents(receipt, "Sync").map(e => this.decodeSyncEvent(e));
        }
        decodeSyncEvent(event) {
            let result = event.data;
            return {
                reserve0: new eth_contract_2.BigNumber(result.reserve0),
                reserve1: new eth_contract_2.BigNumber(result.reserve1),
                _event: event
            };
        }
        assign() {
            let blockTimestampLast_call = async (options) => {
                let result = await this.call('blockTimestampLast', [], options);
                return new eth_contract_2.BigNumber(result);
            };
            this.blockTimestampLast = blockTimestampLast_call;
            let getReserves_call = async (options) => {
                let result = await this.call('getReserves', [], options);
                return {
                    reserve0: new eth_contract_2.BigNumber(result._reserve0),
                    reserve1: new eth_contract_2.BigNumber(result._reserve1),
                    blockTimestampLast: new eth_contract_2.BigNumber(result._blockTimestampLast)
                };
            };
            this.getReserves = getReserves_call;
            let reserve0_call = async (options) => {
                let result = await this.call('reserve0', [], options);
                return new eth_contract_2.BigNumber(result);
            };
            this.reserve0 = reserve0_call;
            let reserve1_call = async (options) => {
                let result = await this.call('reserve1', [], options);
                return new eth_contract_2.BigNumber(result);
            };
            this.reserve1 = reserve1_call;
            let token0_call = async (options) => {
                let result = await this.call('token0', [], options);
                return result;
            };
            this.token0 = token0_call;
            let token1_call = async (options) => {
                let result = await this.call('token1', [], options);
                return result;
            };
            this.token1 = token1_call;
            let addLiquidityParams = (params) => [this.wallet.utils.toString(params.amount0In), this.wallet.utils.toString(params.amount1In)];
            let addLiquidity_send = async (params, options) => {
                let result = await this.send('addLiquidity', addLiquidityParams(params), options);
                return result;
            };
            let addLiquidity_call = async (params, options) => {
                let result = await this.call('addLiquidity', addLiquidityParams(params), options);
                return;
            };
            this.addLiquidity = Object.assign(addLiquidity_send, {
                call: addLiquidity_call
            });
            let swapParams = (params) => [this.wallet.utils.toString(params.amount0Out), this.wallet.utils.toString(params.amount1Out), params.to, this.wallet.utils.stringToBytes(params.param4)];
            let swap_send = async (params, options) => {
                let result = await this.send('swap', swapParams(params), options);
                return result;
            };
            let swap_call = async (params, options) => {
                let result = await this.call('swap', swapParams(params), options);
                return;
            };
            this.swap = Object.assign(swap_send, {
                call: swap_call
            });
            let sync_send = async (options) => {
                let result = await this.send('sync', [], options);
                return result;
            };
            let sync_call = async (options) => {
                let result = await this.call('sync', [], options);
                return;
            };
            this.sync = Object.assign(sync_send, {
                call: sync_call
            });
        }
    }
    MockAMMPair._abi = MockAMMPair_json_1.default.abi;
    exports.MockAMMPair = MockAMMPair;
});
define("mock-contracts/contracts/MockOracleAdaptor.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='mock-contracts/contracts/MockOracleAdaptor.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_weth", "type": "address" }, { "internalType": "uint8", "name": "_decimals", "type": "uint8" }, { "internalType": "address[]", "name": "_tokens", "type": "address[]" }, { "internalType": "uint256[]", "name": "_prices", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "getLatestPrice", "outputs": [{ "internalType": "uint256", "name": "price", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "getRatio", "outputs": [{ "internalType": "uint256", "name": "numerator", "type": "uint256" }, { "internalType": "uint256", "name": "denominator", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }], "name": "isSupported", "outputs": [{ "internalType": "bool", "name": "supported", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "price", "type": "uint256" }], "name": "setPrice", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token0", "type": "address" }, { "internalType": "address", "name": "token1", "type": "address" }, { "internalType": "uint256", "name": "price0", "type": "uint256" }, { "internalType": "uint256", "name": "price1", "type": "uint256" }], "name": "setPrice", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "weth", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "60c06040523480156200001157600080fd5b5060405162000f3738038062000f37833981016040819052620000349162000516565b80518251146200007d5760405162461bcd60e51b815260206004820152601060248201526f0d8cadccee8d040dcdee840dac2e8c6d60831b604482015260640160405180910390fd5b6001600160a01b03841660a05260ff83166080819052600090620000a390600a62000728565b835190915060005b818110156200040a576040518060400160405280848152602001858381518110620000da57620000da6200073d565b6020026020010151815250600080878481518110620000fd57620000fd6200073d565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000896001600160a01b03166001600160a01b03168152602001908152602001600020600082015181600001556020820151816001015590505060405180604001604052808583815181106200017f576200017f6200073d565b6020026020010151815260200184815250600080896001600160a01b03166001600160a01b031681526020019081526020016000206000878481518110620001cb57620001cb6200073d565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600082015181600001556020820151816001015590505060008160016200021b919062000753565b90505b82811015620003f45760405180604001604052808683815181106200024757620002476200073d565b602002602001015181526020018684815181106200026957620002696200073d565b60200260200101518152506000808885815181106200028c576200028c6200073d565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000888481518110620002cb57620002cb6200073d565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600082015181600001556020820151816001015590505060405180604001604052808684815181106200032a576200032a6200073d565b602002602001015181526020018683815181106200034c576200034c6200073d565b60200260200101518152506000808884815181106200036f576200036f6200073d565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000888581518110620003ae57620003ae6200073d565b6020908102919091018101516001600160a01b03168252818101929092526040016000208251815591015160019091015580620003eb8162000769565b9150506200021e565b5080620004018162000769565b915050620000ab565b5050505050505062000785565b80516001600160a01b03811681146200042f57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000475576200047562000434565b604052919050565b60006001600160401b0382111562000499576200049962000434565b5060051b60200190565b600082601f830112620004b557600080fd5b81516020620004ce620004c8836200047d565b6200044a565b82815260059290921b84018101918181019086841115620004ee57600080fd5b8286015b848110156200050b5780518352918301918301620004f2565b509695505050505050565b600080600080608085870312156200052d57600080fd5b620005388562000417565b935060208086015160ff811681146200055057600080fd5b60408701519094506001600160401b03808211156200056e57600080fd5b818801915088601f8301126200058357600080fd5b815162000594620004c8826200047d565b81815260059190911b8301840190848101908b831115620005b457600080fd5b938501935b82851015620005dd57620005cd8562000417565b82529385019390850190620005b9565b60608b01519097509450505080831115620005f757600080fd5b50506200060787828801620004a3565b91505092959194509250565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156200066a5781600019048211156200064e576200064e62000613565b808516156200065c57918102915b93841c93908002906200062e565b509250929050565b600082620006835750600162000722565b81620006925750600062000722565b8160018114620006ab5760028114620006b657620006d6565b600191505062000722565b60ff841115620006ca57620006ca62000613565b50506001821b62000722565b5060208310610133831016604e8410600b8410161715620006fb575081810a62000722565b62000707838362000629565b80600019048211156200071e576200071e62000613565b0290505b92915050565b600062000736838362000672565b9392505050565b634e487b7160e01b600052603260045260246000fd5b8082018082111562000722576200072262000613565b6000600182016200077e576200077e62000613565b5060010190565b60805160a051610780620007b76000396000818160d901526102bd015260008181609b015261025d01526107806000f3fe608060405234801561001057600080fd5b506004361061007c5760003560e01c8063495e43481161005b578063495e43481461012057806388462c8d14610141578063a405d31214610164578063d9da4fe6146101ef57600080fd5b8062e4768b14610081578063313ce567146100965780633fc8cef3146100d4575b600080fd5b61009461008f3660046103ec565b610254565b005b6100bd7f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020015b60405180910390f35b6100fb7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100cb565b61013361012e36600461045f565b610323565b6040519081526020016100cb565b61015461014f3660046104c0565b610370565b60405190151581526020016100cb565b6100946101723660046104f3565b604080518082018252838152602080820184815273ffffffffffffffffffffffffffffffffffffffff978816600081815280845285812098909916808a5297835284892093518455905160019384015583518085018552948552848201958652958752868152828720958752949094529093209251835551910155565b61023f6101fd366004610535565b50505073ffffffffffffffffffffffffffffffffffffffff92831660009081526020818152604080832094909516825292909252502080546001909101549091565b604080519283526020830191909152016100cb565b600061028460ff7f000000000000000000000000000000000000000000000000000000000000000016600a6106fc565b604080518082018252848152602080820184815273ffffffffffffffffffffffffffffffffffffffff97881660008181528084528581207f0000000000000000000000000000000000000000000000000000000000000000909a16808252998452858120945185559151600194850155845180860186529586528583019788529781528082528381209781529690529420905181559151919092015550565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208181526040808320938716835292905290812060018101548154610366919061070f565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526020818152604080832093851683529290529081206001810154158015906103b9575060008160010154115b9150505b92915050565b803573ffffffffffffffffffffffffffffffffffffffff811681146103e757600080fd5b919050565b600080604083850312156103ff57600080fd5b610408836103c3565b946020939093013593505050565b60008083601f84011261042857600080fd5b50813567ffffffffffffffff81111561044057600080fd5b60208301915083602082850101111561045857600080fd5b9250929050565b6000806000806060858703121561047557600080fd5b61047e856103c3565b935061048c602086016103c3565b9250604085013567ffffffffffffffff8111156104a857600080fd5b6104b487828801610416565b95989497509550505050565b600080604083850312156104d357600080fd5b6104dc836103c3565b91506104ea602084016103c3565b90509250929050565b6000806000806080858703121561050957600080fd5b610512856103c3565b9350610520602086016103c3565b93969395505050506040820135916060013590565b60008060008060008060a0878903121561054e57600080fd5b610557876103c3565b9550610565602088016103c3565b94506040870135935060608701359250608087013567ffffffffffffffff81111561058f57600080fd5b61059b89828a01610416565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b8085111561063557817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561061b5761061b6105ad565b8085161561062857918102915b93841c93908002906105e1565b509250929050565b60008261064c575060016103bd565b81610659575060006103bd565b816001811461066f576002811461067957610695565b60019150506103bd565b60ff84111561068a5761068a6105ad565b50506001821b6103bd565b5060208310610133831016604e8410600b84101617156106b8575081810a6103bd565b6106c283836105dc565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156106f4576106f46105ad565b029392505050565b6000610708838361063d565b9392505050565b600082610745577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212208619e7fe5945970801237f26e284028f5a144bdb8fb4fa75e338119f51b4ff0b64736f6c63430008110033"
    };
});
define("mock-contracts/contracts/MockOracleAdaptor.ts", ["require", "exports", "@ijstech/eth-contract", "mock-contracts/contracts/MockOracleAdaptor.json.ts"], function (require, exports, eth_contract_3, MockOracleAdaptor_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MockOracleAdaptor = void 0;
    class MockOracleAdaptor extends eth_contract_3.Contract {
        constructor(wallet, address) {
            super(wallet, address, MockOracleAdaptor_json_1.default.abi, MockOracleAdaptor_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.weth, this.wallet.utils.toString(params.decimals), params.tokens, this.wallet.utils.toString(params.prices)], options);
        }
        assign() {
            let decimals_call = async (options) => {
                let result = await this.call('decimals', [], options);
                return new eth_contract_3.BigNumber(result);
            };
            this.decimals = decimals_call;
            let getLatestPriceParams = (params) => [params.from, params.to, this.wallet.utils.stringToBytes(params.param3)];
            let getLatestPrice_call = async (params, options) => {
                let result = await this.call('getLatestPrice', getLatestPriceParams(params), options);
                return new eth_contract_3.BigNumber(result);
            };
            this.getLatestPrice = getLatestPrice_call;
            let getRatioParams = (params) => [params.from, params.to, this.wallet.utils.toString(params.param3), this.wallet.utils.toString(params.param4), this.wallet.utils.stringToBytes(params.param5)];
            let getRatio_call = async (params, options) => {
                let result = await this.call('getRatio', getRatioParams(params), options);
                return {
                    numerator: new eth_contract_3.BigNumber(result.numerator),
                    denominator: new eth_contract_3.BigNumber(result.denominator)
                };
            };
            this.getRatio = getRatio_call;
            let isSupportedParams = (params) => [params.from, params.to];
            let isSupported_call = async (params, options) => {
                let result = await this.call('isSupported', isSupportedParams(params), options);
                return result;
            };
            this.isSupported = isSupported_call;
            let weth_call = async (options) => {
                let result = await this.call('weth', [], options);
                return result;
            };
            this.weth = weth_call;
            let setPriceParams = (params) => [params.token, this.wallet.utils.toString(params.price)];
            let setPrice_send = async (params, options) => {
                let result = await this.send('setPrice', setPriceParams(params), options);
                return result;
            };
            let setPrice_call = async (params, options) => {
                let result = await this.call('setPrice', setPriceParams(params), options);
                return;
            };
            this.setPrice = Object.assign(setPrice_send, {
                call: setPrice_call
            });
            let setPrice_1Params = (params) => [params.token0, params.token1, this.wallet.utils.toString(params.price0), this.wallet.utils.toString(params.price1)];
            let setPrice_1_send = async (params, options) => {
                let result = await this.send('setPrice', setPrice_1Params(params), options);
                return result;
            };
            let setPrice_1_call = async (params, options) => {
                let result = await this.call('setPrice', setPrice_1Params(params), options);
                return;
            };
            this.setPrice_1 = Object.assign(setPrice_1_send, {
                call: setPrice_1_call
            });
        }
    }
    MockOracleAdaptor._abi = MockOracleAdaptor_json_1.default.abi;
    exports.MockOracleAdaptor = MockOracleAdaptor;
});
define("mock-contracts/contracts/MockOracleAdaptor3.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='mock-contracts/contracts/MockOracleAdaptor3.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_weth", "type": "address" }, { "internalType": "uint8", "name": "_decimals", "type": "uint8" }, { "internalType": "address[]", "name": "_tokens", "type": "address[]" }, { "internalType": "uint256[]", "name": "_prices", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "getLatestPrice", "outputs": [{ "internalType": "uint256", "name": "price", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "getRatio", "outputs": [{ "internalType": "uint256", "name": "numerator", "type": "uint256" }, { "internalType": "uint256", "name": "denominator", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }], "name": "isSupported", "outputs": [{ "internalType": "bool", "name": "supported", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "price", "type": "uint256" }], "name": "setPrice", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "weth", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
        ],
        "bytecode": "60c06040523480156200001157600080fd5b50604051620009e4380380620009e4833981016040819052620000349162000221565b6001600160a01b03841660a05260ff83166080528051825114620000915760405162461bcd60e51b815260206004820152601060248201526f0d8cadccee8d040dcdee840dac2e8c6d60831b604482015260640160405180910390fd5b815160005b818110156200011657828181518110620000b457620000b46200031e565b6020026020010151600080868481518110620000d457620000d46200031e565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555080806200010d9062000334565b91505062000096565b5050505050506200035c565b80516001600160a01b03811681146200013a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200018057620001806200013f565b604052919050565b60006001600160401b03821115620001a457620001a46200013f565b5060051b60200190565b600082601f830112620001c057600080fd5b81516020620001d9620001d38362000188565b62000155565b82815260059290921b84018101918181019086841115620001f957600080fd5b8286015b84811015620002165780518352918301918301620001fd565b509695505050505050565b600080600080608085870312156200023857600080fd5b620002438562000122565b935060208086015160ff811681146200025b57600080fd5b60408701519094506001600160401b03808211156200027957600080fd5b818801915088601f8301126200028e57600080fd5b81516200029f620001d38262000188565b81815260059190911b8301840190848101908b831115620002bf57600080fd5b938501935b82851015620002e857620002d88562000122565b82529385019390850190620002c4565b60608b015190975094505050808311156200030257600080fd5b50506200031287828801620001ae565b91505092959194509250565b634e487b7160e01b600052603260045260246000fd5b6000600182016200035557634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a05161065d62000387600039600060f201526000818160b40152610208015261065d6000f3fe608060405234801561001057600080fd5b50600436106100715760003560e01c8063495e434811610050578063495e43481461013957806388462c8d1461015a578063d9da4fe61461017d57600080fd5b8062e4768b14610076578063313ce567146100af5780633fc8cef3146100ed575b600080fd5b6100ad6100843660046102fb565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260208190526040902055565b005b6100d67f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020015b60405180910390f35b6101147f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e4565b61014c61014736600461036e565b6101db565b6040519081526020016100e4565b61016d6101683660046103cf565b610272565b60405190151581526020016100e4565b6101c661018b366004610402565b5050505073ffffffffffffffffffffffffffffffffffffffff9182166000908152602081905260408082205492909316815291909120549091565b604080519283526020830191909152016100e4565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604081205461022f60ff7f000000000000000000000000000000000000000000000000000000000000000016600a6105c9565b73ffffffffffffffffffffffffffffffffffffffff871660009081526020819052604090205461025f91906105d5565b61026991906105ec565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260408120541515806102c9575073ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205415155b90505b92915050565b803573ffffffffffffffffffffffffffffffffffffffff811681146102f657600080fd5b919050565b6000806040838503121561030e57600080fd5b610317836102d2565b946020939093013593505050565b60008083601f84011261033757600080fd5b50813567ffffffffffffffff81111561034f57600080fd5b60208301915083602082850101111561036757600080fd5b9250929050565b6000806000806060858703121561038457600080fd5b61038d856102d2565b935061039b602086016102d2565b9250604085013567ffffffffffffffff8111156103b757600080fd5b6103c387828801610325565b95989497509550505050565b600080604083850312156103e257600080fd5b6103eb836102d2565b91506103f9602084016102d2565b90509250929050565b60008060008060008060a0878903121561041b57600080fd5b610424876102d2565b9550610432602088016102d2565b94506040870135935060608701359250608087013567ffffffffffffffff81111561045c57600080fd5b61046889828a01610325565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b8085111561050257817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156104e8576104e861047a565b808516156104f557918102915b93841c93908002906104ae565b509250929050565b600082610519575060016102cc565b81610526575060006102cc565b816001811461053c576002811461054657610562565b60019150506102cc565b60ff8411156105575761055761047a565b50506001821b6102cc565b5060208310610133831016604e8410600b8410161715610585575081810a6102cc565b61058f83836104a9565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156105c1576105c161047a565b029392505050565b60006102c9838361050a565b80820281158282048414176102cc576102cc61047a565b600082610622577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212201e4793ef0534cb9a5bb9efa2e1af4e5029a6a5e44fa915b609548b1a3bd2f9a464736f6c63430008110033"
    };
});
define("mock-contracts/contracts/MockOracleAdaptor3.ts", ["require", "exports", "@ijstech/eth-contract", "mock-contracts/contracts/MockOracleAdaptor3.json.ts"], function (require, exports, eth_contract_4, MockOracleAdaptor3_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MockOracleAdaptor3 = void 0;
    class MockOracleAdaptor3 extends eth_contract_4.Contract {
        constructor(wallet, address) {
            super(wallet, address, MockOracleAdaptor3_json_1.default.abi, MockOracleAdaptor3_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.weth, this.wallet.utils.toString(params.decimals), params.tokens, this.wallet.utils.toString(params.prices)], options);
        }
        assign() {
            let decimals_call = async (options) => {
                let result = await this.call('decimals', [], options);
                return new eth_contract_4.BigNumber(result);
            };
            this.decimals = decimals_call;
            let getLatestPriceParams = (params) => [params.from, params.to, this.wallet.utils.stringToBytes(params.param3)];
            let getLatestPrice_call = async (params, options) => {
                let result = await this.call('getLatestPrice', getLatestPriceParams(params), options);
                return new eth_contract_4.BigNumber(result);
            };
            this.getLatestPrice = getLatestPrice_call;
            let getRatioParams = (params) => [params.from, params.to, this.wallet.utils.toString(params.param3), this.wallet.utils.toString(params.param4), this.wallet.utils.stringToBytes(params.param5)];
            let getRatio_call = async (params, options) => {
                let result = await this.call('getRatio', getRatioParams(params), options);
                return {
                    numerator: new eth_contract_4.BigNumber(result.numerator),
                    denominator: new eth_contract_4.BigNumber(result.denominator)
                };
            };
            this.getRatio = getRatio_call;
            let isSupportedParams = (params) => [params.from, params.to];
            let isSupported_call = async (params, options) => {
                let result = await this.call('isSupported', isSupportedParams(params), options);
                return result;
            };
            this.isSupported = isSupported_call;
            let weth_call = async (options) => {
                let result = await this.call('weth', [], options);
                return result;
            };
            this.weth = weth_call;
            let setPriceParams = (params) => [params.token, this.wallet.utils.toString(params.price)];
            let setPrice_send = async (params, options) => {
                let result = await this.send('setPrice', setPriceParams(params), options);
                return result;
            };
            let setPrice_call = async (params, options) => {
                let result = await this.call('setPrice', setPriceParams(params), options);
                return;
            };
            this.setPrice = Object.assign(setPrice_send, {
                call: setPrice_call
            });
        }
    }
    MockOracleAdaptor3._abi = MockOracleAdaptor3_json_1.default.abi;
    exports.MockOracleAdaptor3 = MockOracleAdaptor3;
});
define("mock-contracts/contracts/MockPriceOracle.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='mock-contracts/contracts/MockPriceOracle.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
            { "inputs": [], "name": "latestAnswer", "outputs": [{ "internalType": "int256", "name": "", "type": "int256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "int256", "name": "_price", "type": "int256" }], "name": "setPrice", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": "60a060405234801561001057600080fd5b503360805260805161015c61002f6000396000607d015261015c6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806350d25bcd1461003b578063f7a3080614610050575b600080fd5b60005460405190815260200160405180910390f35b61006361005e36600461010d565b610065565b005b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610108576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f74206f776e65720000000000000000000000000000000000000000000000604482015260640160405180910390fd5b600055565b60006020828403121561011f57600080fd5b503591905056fea2646970667358221220847c3a1de4bb788840dc1679cf3607dec8d2d48d8ee54caf0d4d970a59d8b3ff64736f6c63430008110033"
    };
});
define("mock-contracts/contracts/MockPriceOracle.ts", ["require", "exports", "@ijstech/eth-contract", "mock-contracts/contracts/MockPriceOracle.json.ts"], function (require, exports, eth_contract_5, MockPriceOracle_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MockPriceOracle = void 0;
    class MockPriceOracle extends eth_contract_5.Contract {
        constructor(wallet, address) {
            super(wallet, address, MockPriceOracle_json_1.default.abi, MockPriceOracle_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        assign() {
            let latestAnswer_call = async (options) => {
                let result = await this.call('latestAnswer', [], options);
                return new eth_contract_5.BigNumber(result);
            };
            this.latestAnswer = latestAnswer_call;
            let setPrice_send = async (price, options) => {
                let result = await this.send('setPrice', [this.wallet.utils.toString(price)], options);
                return result;
            };
            let setPrice_call = async (price, options) => {
                let result = await this.call('setPrice', [this.wallet.utils.toString(price)], options);
                return;
            };
            this.setPrice = Object.assign(setPrice_send, {
                call: setPrice_call
            });
        }
    }
    MockPriceOracle._abi = MockPriceOracle_json_1.default.abi;
    exports.MockPriceOracle = MockPriceOracle;
});
define("mock-contracts/contracts/MockRouter.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='mock-contracts/contracts/MockRouter.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "address", "name": "_weth", "type": "address" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address[]", "name": "tokenIn", "type": "address[]" }, { "internalType": "address[]", "name": "tokenOut", "type": "address[]" }, { "internalType": "uint256[]", "name": "rate", "type": "uint256[]" }], "stateMutability": "payable", "type": "constructor" },
            { "inputs": [], "name": "WETH", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapETHForExactTokens", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactETHForTokens", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "payable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "swapExactTokensForETH", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "swapExactTokensForTokens", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMax", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapTokensForExactETH", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMax", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapTokensForExactTokens", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
            { "stateMutability": "payable", "type": "receive" }
        ],
        "bytecode": "60a060405260405162001a5a38038062001a5a8339810160408190526200002691620003f0565b6001600160a01b0385166080528351835181148015620000465750825181145b8015620000535750815181145b620000995760405162461bcd60e51b81526020600482015260126024820152711b195b99dd1a081b9bdd081b585d18da195960721b604482015260640160405180910390fd5b60005b81811015620002db576040518060400160405280858381518110620000c557620000c562000519565b60200260200101516001600160a01b03168152602001848381518110620000f057620000f062000519565b602002602001015181525060008088848151811062000113576200011362000519565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600087848151811062000152576200015262000519565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101559050506040518060400160405280868381518110620001d457620001d462000519565b60200260200101516001600160a01b03168152602001848381518110620001ff57620001ff62000519565b60200260200101516ec097ce7bc90715b34b9f10000000006200022391906200052f565b8152506000808884815181106200023e576200023e62000519565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008684815181106200027d576200027d62000519565b6020908102919091018101516001600160a01b039081168352828201939093526040909101600020835181546001600160a01b0319169316929092178255919091015160019091015580620002d28162000552565b9150506200009c565b505050505050506200057a565b80516001600160a01b03811681146200030057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000346576200034662000305565b604052919050565b60006001600160401b038211156200036a576200036a62000305565b5060051b60200190565b600082601f8301126200038657600080fd5b815160206200039f62000399836200034e565b6200031b565b82815260059290921b84018101918181019086841115620003bf57600080fd5b8286015b84811015620003e557620003d781620002e8565b8352918301918301620003c3565b509695505050505050565b600080600080600060a086880312156200040957600080fd5b6200041486620002e8565b602087810151919650906001600160401b03808211156200043457600080fd5b620004428a838b0162000374565b965060408901519150808211156200045957600080fd5b620004678a838b0162000374565b955060608901519150808211156200047e57600080fd5b6200048c8a838b0162000374565b94506080890151915080821115620004a357600080fd5b508701601f81018913620004b657600080fd5b8051620004c762000399826200034e565b81815260059190911b8201830190838101908b831115620004e757600080fd5b928401925b828410156200050757835182529284019290840190620004ec565b80955050505050509295509295909350565b634e487b7160e01b600052603260045260246000fd5b6000826200054d57634e487b7160e01b600052601260045260246000fd5b500490565b6000600182016200057357634e487b7160e01b600052601160045260246000fd5b5060010190565b6080516114be6200059c6000396000818160e901526105f801526114be6000f3fe6080604052600436106100745760003560e01c8063b132b5e11161004e578063b132b5e114610130578063c1385f241461015b578063e76c597514610187578063ed3b11ce1461018757600080fd5b806365d9e64b146100805780638af13937146100b7578063ad5c4648146100d757600080fd5b3661007b57005b600080fd5b34801561008c57600080fd5b506100a061009b366004610fc7565b6101a4565b6040516100ae92919061107a565b60405180910390f35b3480156100c357600080fd5b506100a06100d236600461110b565b610554565b3480156100e357600080fd5b5061010b7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ae565b34801561013c57600080fd5b506100a061014b36600461110b565b6060809850989650505050505050565b34801561016757600080fd5b506100a0610176366004610fc7565b606080995099975050505050505050565b6100a06101953660046111ab565b60608097509795505050505050565b606080876101b3816001611271565b67ffffffffffffffff8111156101cb576101cb61128a565b6040519080825280602002602001820160405280156101f4578160200160208202803683370190505b509250610202816001611271565b67ffffffffffffffff81111561021a5761021a61128a565b604051908082528060200260200182016040528015610243578160200160208202803683370190505b509150878360008151811061025a5761025a6112b9565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508b826000815181106102a8576102a86112b9565b60209081029190910101526102d573ffffffffffffffffffffffffffffffffffffffff891633308f6109bb565b60005b8181101561045f5760008060008d8d858181106102f7576102f76112b9565b905060200201602081019061030c91906112e8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086848151811061035a5761035a6112b9565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff9081168352908201929092526040016000208054909250168561039f846001611271565b815181106103af576103af6112b9565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050670de0b6b3a76400008160010154858481518110610409576104096112b9565b602002602001015161041b9190611303565b610425919061131a565b84610431846001611271565b81518110610441576104416112b9565b6020908102919091010152508061045781611355565b9150506102d8565b50818181518110610472576104726112b9565b60200260200101518b11156104e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f696e73756666696369656e74206f757470757420616d6f756e7400000000000060448201526064015b60405180910390fd5b610545878383815181106104fe576104fe6112b9565b6020026020010151858481518110610518576105186112b9565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610a9d9092919063ffffffff16565b50995099975050505050505050565b60608086610563816001611271565b67ffffffffffffffff81111561057b5761057b61128a565b6040519080825280602002602001820160405280156105a4578160200160208202803683370190505b5092506105b2816001611271565b67ffffffffffffffff8111156105ca576105ca61128a565b6040519080825280602002602001820160405280156105f3578160200160208202803683370190505b5091507f0000000000000000000000000000000000000000000000000000000000000000838281518110610629576106296112b9565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152805b801561076057600160008b8b610666848661138d565b818110610675576106756112b9565b905060200201602081019061068a91906112e8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008583815181106106d8576106d86112b9565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff90811683529082019290925260400160002054168461071960018461138d565b81518110610729576107296112b9565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280610758816113a0565b915050610650565b506107a733308d868581518110610779576107796112b9565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166109bb909392919063ffffffff16565b8a826000815181106107bb576107bb6112b9565b60200260200101818152505060005b818110156109065760008060008c8c858181106107e9576107e96112b9565b90506020020160208101906107fe91906112e8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086848151811061084c5761084c6112b9565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050670de0b6b3a764000081600101548584815181106108b0576108b06112b9565b60200260200101516108c29190611303565b6108cc919061131a565b846108d8846001611271565b815181106108e8576108e86112b9565b602090810291909101015250806108fe81611355565b9150506107ca565b50818181518110610919576109196112b9565b60200260200101518a111561098a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f696e73756666696369656e74206f757470757420616d6f756e7400000000000060448201526064016104df565b6109ad878383815181106109a0576109a06112b9565b6020026020010151610af8565b509850989650505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610a979085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610c02565b50505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610af39084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610a15565b505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff8416908390604051610b2f91906113f9565b60006040518083038185875af1925050503d8060008114610b6c576040519150601f19603f3d011682016040523d82523d6000602084013e610b71565b606091505b5050905080610af3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201527f4c4544000000000000000000000000000000000000000000000000000000000060648201526084016104df565b6000610c64826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610d0e9092919063ffffffff16565b805190915015610af35780806020019051810190610c829190611415565b610af3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104df565b6060610d1d8484600085610d27565b90505b9392505050565b606082471015610db9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104df565b73ffffffffffffffffffffffffffffffffffffffff85163b610e37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104df565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610e6091906113f9565b60006040518083038185875af1925050503d8060008114610e9d576040519150601f19603f3d011682016040523d82523d6000602084013e610ea2565b606091505b5091509150610eb2828286610ebd565b979650505050505050565b60608315610ecc575081610d20565b825115610edc5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104df9190611437565b60008083601f840112610f2257600080fd5b50813567ffffffffffffffff811115610f3a57600080fd5b6020830191508360208260051b8501011115610f5557600080fd5b9250929050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610f8057600080fd5b919050565b60008083601f840112610f9757600080fd5b50813567ffffffffffffffff811115610faf57600080fd5b602083019150836020828501011115610f5557600080fd5b600080600080600080600080600060e08a8c031215610fe557600080fd5b8935985060208a0135975060408a013567ffffffffffffffff8082111561100b57600080fd5b6110178d838e01610f10565b909950975087915061102b60608d01610f5c565b965061103960808d01610f5c565b955060a08c0135945060c08c013591508082111561105657600080fd5b506110638c828d01610f85565b915080935050809150509295985092959850929598565b604080825283519082018190526000906020906060840190828701845b828110156110c957815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101611097565b5050508381038285015284518082528583019183019060005b818110156110fe578351835292840192918401916001016110e2565b5090979650505050505050565b60008060008060008060008060c0898b03121561112757600080fd5b8835975060208901359650604089013567ffffffffffffffff8082111561114d57600080fd5b6111598c838d01610f10565b909850965086915061116d60608c01610f5c565b955060808b0135945060a08b013591508082111561118a57600080fd5b506111978b828c01610f85565b999c989b5096995094979396929594505050565b600080600080600080600060a0888a0312156111c657600080fd5b87359650602088013567ffffffffffffffff808211156111e557600080fd5b6111f18b838c01610f10565b909850965086915061120560408b01610f5c565b955060608a0135945060808a013591508082111561122257600080fd5b5061122f8a828b01610f85565b989b979a50959850939692959293505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561128457611284611242565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156112fa57600080fd5b610d2082610f5c565b808202811582820484141761128457611284611242565b600082611350577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361138657611386611242565b5060010190565b8181038181111561128457611284611242565b6000816113af576113af611242565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60005b838110156113f05781810151838201526020016113d8565b50506000910152565b6000825161140b8184602087016113d5565b9190910192915050565b60006020828403121561142757600080fd5b81518015158114610d2057600080fd5b60208152600082518060208401526114568160408501602087016113d5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220175bb86abe3c1f7dd5dd34550ebd2bf87b32b932e17532758422684b86cab3c864736f6c63430008110033"
    };
});
define("mock-contracts/contracts/MockRouter.ts", ["require", "exports", "@ijstech/eth-contract", "mock-contracts/contracts/MockRouter.json.ts"], function (require, exports, eth_contract_6, MockRouter_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MockRouter = void 0;
    class MockRouter extends eth_contract_6.Contract {
        constructor(wallet, address) {
            super(wallet, address, MockRouter_json_1.default.abi, MockRouter_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.weth, params.pair, params.tokenIn, params.tokenOut, this.wallet.utils.toString(params.rate)], options);
        }
        assign() {
            let WETH_call = async (options) => {
                let result = await this.call('WETH', [], options);
                return result;
            };
            this.WETH = WETH_call;
            let swapETHForExactTokensParams = (params) => [this.wallet.utils.toString(params.amountOut), params.pair, params.to, this.wallet.utils.toString(params.deadline), this.wallet.utils.stringToBytes(params.data)];
            let swapETHForExactTokens_send = async (params, options) => {
                let result = await this.send('swapETHForExactTokens', swapETHForExactTokensParams(params), options);
                return result;
            };
            let swapETHForExactTokens_call = async (params, options) => {
                let result = await this.call('swapETHForExactTokens', swapETHForExactTokensParams(params), options);
                return {
                    path: result.path,
                    amounts: result.amounts.map(e => new eth_contract_6.BigNumber(e))
                };
            };
            this.swapETHForExactTokens = Object.assign(swapETHForExactTokens_send, {
                call: swapETHForExactTokens_call
            });
            let swapExactETHForTokensParams = (params) => [this.wallet.utils.toString(params.amountOutMin), params.pair, params.to, this.wallet.utils.toString(params.deadline), this.wallet.utils.stringToBytes(params.data)];
            let swapExactETHForTokens_send = async (params, options) => {
                let result = await this.send('swapExactETHForTokens', swapExactETHForTokensParams(params), options);
                return result;
            };
            let swapExactETHForTokens_call = async (params, options) => {
                let result = await this.call('swapExactETHForTokens', swapExactETHForTokensParams(params), options);
                return {
                    path: result.path,
                    amounts: result.amounts.map(e => new eth_contract_6.BigNumber(e))
                };
            };
            this.swapExactETHForTokens = Object.assign(swapExactETHForTokens_send, {
                call: swapExactETHForTokens_call
            });
            let swapExactTokensForETHParams = (params) => [this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMin), params.pair, params.to, this.wallet.utils.toString(params.param5), this.wallet.utils.stringToBytes(params.param6)];
            let swapExactTokensForETH_send = async (params, options) => {
                let result = await this.send('swapExactTokensForETH', swapExactTokensForETHParams(params), options);
                return result;
            };
            let swapExactTokensForETH_call = async (params, options) => {
                let result = await this.call('swapExactTokensForETH', swapExactTokensForETHParams(params), options);
                return {
                    path: result.path,
                    amounts: result.amounts.map(e => new eth_contract_6.BigNumber(e))
                };
            };
            this.swapExactTokensForETH = Object.assign(swapExactTokensForETH_send, {
                call: swapExactTokensForETH_call
            });
            let swapExactTokensForTokensParams = (params) => [this.wallet.utils.toString(params.amountIn), this.wallet.utils.toString(params.amountOutMin), params.pair, params.tokenIn, params.to, this.wallet.utils.toString(params.param6), this.wallet.utils.stringToBytes(params.param7)];
            let swapExactTokensForTokens_send = async (params, options) => {
                let result = await this.send('swapExactTokensForTokens', swapExactTokensForTokensParams(params), options);
                return result;
            };
            let swapExactTokensForTokens_call = async (params, options) => {
                let result = await this.call('swapExactTokensForTokens', swapExactTokensForTokensParams(params), options);
                return {
                    path: result.path,
                    amounts: result.amounts.map(e => new eth_contract_6.BigNumber(e))
                };
            };
            this.swapExactTokensForTokens = Object.assign(swapExactTokensForTokens_send, {
                call: swapExactTokensForTokens_call
            });
            let swapTokensForExactETHParams = (params) => [this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.amountInMax), params.pair, params.to, this.wallet.utils.toString(params.deadline), this.wallet.utils.stringToBytes(params.data)];
            let swapTokensForExactETH_send = async (params, options) => {
                let result = await this.send('swapTokensForExactETH', swapTokensForExactETHParams(params), options);
                return result;
            };
            let swapTokensForExactETH_call = async (params, options) => {
                let result = await this.call('swapTokensForExactETH', swapTokensForExactETHParams(params), options);
                return {
                    path: result.path,
                    amounts: result.amounts.map(e => new eth_contract_6.BigNumber(e))
                };
            };
            this.swapTokensForExactETH = Object.assign(swapTokensForExactETH_send, {
                call: swapTokensForExactETH_call
            });
            let swapTokensForExactTokensParams = (params) => [this.wallet.utils.toString(params.amountOut), this.wallet.utils.toString(params.amountInMax), params.pair, params.tokenOut, params.to, this.wallet.utils.toString(params.deadline), this.wallet.utils.stringToBytes(params.data)];
            let swapTokensForExactTokens_send = async (params, options) => {
                let result = await this.send('swapTokensForExactTokens', swapTokensForExactTokensParams(params), options);
                return result;
            };
            let swapTokensForExactTokens_call = async (params, options) => {
                let result = await this.call('swapTokensForExactTokens', swapTokensForExactTokensParams(params), options);
                return {
                    path: result.path,
                    amounts: result.amounts.map(e => new eth_contract_6.BigNumber(e))
                };
            };
            this.swapTokensForExactTokens = Object.assign(swapTokensForExactTokens_send, {
                call: swapTokensForExactTokens_call
            });
        }
    }
    MockRouter._abi = MockRouter_json_1.default.abi;
    exports.MockRouter = MockRouter;
});
define("mock-contracts/contracts/MockErc20.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='mock-contracts/contracts/MockErc20.json.ts'/> 
    exports.default = {
        "abi": [
            { "inputs": [{ "internalType": "string", "name": "name", "type": "string" }, { "internalType": "string", "name": "symbol", "type": "string" }, { "internalType": "uint8", "name": "_decimals_", "type": "uint8" }], "stateMutability": "nonpayable", "type": "constructor" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "account", "type": "address" }], "name": "Paused", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "indexed": true, "internalType": "bytes32", "name": "previousAdminRole", "type": "bytes32" }, { "indexed": true, "internalType": "bytes32", "name": "newAdminRole", "type": "bytes32" }], "name": "RoleAdminChanged", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }], "name": "RoleGranted", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }], "name": "RoleRevoked", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "account", "type": "address" }], "name": "Unpaused", "type": "event" },
            { "inputs": [], "name": "DEFAULT_ADMIN_ROLE", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "MINTER_ROLE", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "PAUSER_ROLE", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "burn", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "burnFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }], "name": "decreaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }], "name": "getRoleAdmin", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "getRoleMember", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }], "name": "getRoleMemberCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "grantRole", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "hasRole", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "addedValue", "type": "uint256" }], "name": "increaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "mint", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "pause", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "paused", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "renounceRole", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "revokeRole", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }], "name": "supportsInterface", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
            { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
            { "inputs": [], "name": "unpause", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
        ],
        "bytecode": ""
    };
});
define("mock-contracts/contracts/MockErc20.ts", ["require", "exports", "@ijstech/eth-contract", "mock-contracts/contracts/MockErc20.json.ts"], function (require, exports, eth_contract_7, MockErc20_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MockErc20 = void 0;
    class MockErc20 extends eth_contract_7.Contract {
        constructor(wallet, address) {
            super(wallet, address, MockErc20_json_1.default.abi, MockErc20_json_1.default.bytecode);
            this.assign();
        }
        deploy(params, options) {
            return this.__deploy([params.name, params.symbol, this.wallet.utils.toString(params.decimals)], options);
        }
        parseApprovalEvent(receipt) {
            return this.parseEvents(receipt, "Approval").map(e => this.decodeApprovalEvent(e));
        }
        decodeApprovalEvent(event) {
            let result = event.data;
            return {
                owner: result.owner,
                spender: result.spender,
                value: new eth_contract_7.BigNumber(result.value),
                _event: event
            };
        }
        parsePausedEvent(receipt) {
            return this.parseEvents(receipt, "Paused").map(e => this.decodePausedEvent(e));
        }
        decodePausedEvent(event) {
            let result = event.data;
            return {
                account: result.account,
                _event: event
            };
        }
        parseRoleAdminChangedEvent(receipt) {
            return this.parseEvents(receipt, "RoleAdminChanged").map(e => this.decodeRoleAdminChangedEvent(e));
        }
        decodeRoleAdminChangedEvent(event) {
            let result = event.data;
            return {
                role: result.role,
                previousAdminRole: result.previousAdminRole,
                newAdminRole: result.newAdminRole,
                _event: event
            };
        }
        parseRoleGrantedEvent(receipt) {
            return this.parseEvents(receipt, "RoleGranted").map(e => this.decodeRoleGrantedEvent(e));
        }
        decodeRoleGrantedEvent(event) {
            let result = event.data;
            return {
                role: result.role,
                account: result.account,
                sender: result.sender,
                _event: event
            };
        }
        parseRoleRevokedEvent(receipt) {
            return this.parseEvents(receipt, "RoleRevoked").map(e => this.decodeRoleRevokedEvent(e));
        }
        decodeRoleRevokedEvent(event) {
            let result = event.data;
            return {
                role: result.role,
                account: result.account,
                sender: result.sender,
                _event: event
            };
        }
        parseTransferEvent(receipt) {
            return this.parseEvents(receipt, "Transfer").map(e => this.decodeTransferEvent(e));
        }
        decodeTransferEvent(event) {
            let result = event.data;
            return {
                from: result.from,
                to: result.to,
                value: new eth_contract_7.BigNumber(result.value),
                _event: event
            };
        }
        parseUnpausedEvent(receipt) {
            return this.parseEvents(receipt, "Unpaused").map(e => this.decodeUnpausedEvent(e));
        }
        decodeUnpausedEvent(event) {
            let result = event.data;
            return {
                account: result.account,
                _event: event
            };
        }
        assign() {
            let DEFAULT_ADMIN_ROLE_call = async (options) => {
                let result = await this.call('DEFAULT_ADMIN_ROLE', [], options);
                return result;
            };
            this.DEFAULT_ADMIN_ROLE = DEFAULT_ADMIN_ROLE_call;
            let MINTER_ROLE_call = async (options) => {
                let result = await this.call('MINTER_ROLE', [], options);
                return result;
            };
            this.MINTER_ROLE = MINTER_ROLE_call;
            let PAUSER_ROLE_call = async (options) => {
                let result = await this.call('PAUSER_ROLE', [], options);
                return result;
            };
            this.PAUSER_ROLE = PAUSER_ROLE_call;
            let allowanceParams = (params) => [params.owner, params.spender];
            let allowance_call = async (params, options) => {
                let result = await this.call('allowance', allowanceParams(params), options);
                return new eth_contract_7.BigNumber(result);
            };
            this.allowance = allowance_call;
            let balanceOf_call = async (account, options) => {
                let result = await this.call('balanceOf', [account], options);
                return new eth_contract_7.BigNumber(result);
            };
            this.balanceOf = balanceOf_call;
            let decimals_call = async (options) => {
                let result = await this.call('decimals', [], options);
                return new eth_contract_7.BigNumber(result);
            };
            this.decimals = decimals_call;
            let getRoleAdmin_call = async (role, options) => {
                let result = await this.call('getRoleAdmin', [this.wallet.utils.stringToBytes32(role)], options);
                return result;
            };
            this.getRoleAdmin = getRoleAdmin_call;
            let getRoleMemberParams = (params) => [this.wallet.utils.stringToBytes32(params.role), this.wallet.utils.toString(params.index)];
            let getRoleMember_call = async (params, options) => {
                let result = await this.call('getRoleMember', getRoleMemberParams(params), options);
                return result;
            };
            this.getRoleMember = getRoleMember_call;
            let getRoleMemberCount_call = async (role, options) => {
                let result = await this.call('getRoleMemberCount', [this.wallet.utils.stringToBytes32(role)], options);
                return new eth_contract_7.BigNumber(result);
            };
            this.getRoleMemberCount = getRoleMemberCount_call;
            let hasRoleParams = (params) => [this.wallet.utils.stringToBytes32(params.role), params.account];
            let hasRole_call = async (params, options) => {
                let result = await this.call('hasRole', hasRoleParams(params), options);
                return result;
            };
            this.hasRole = hasRole_call;
            let name_call = async (options) => {
                let result = await this.call('name', [], options);
                return result;
            };
            this.name = name_call;
            let paused_call = async (options) => {
                let result = await this.call('paused', [], options);
                return result;
            };
            this.paused = paused_call;
            let supportsInterface_call = async (interfaceId, options) => {
                let result = await this.call('supportsInterface', [interfaceId], options);
                return result;
            };
            this.supportsInterface = supportsInterface_call;
            let symbol_call = async (options) => {
                let result = await this.call('symbol', [], options);
                return result;
            };
            this.symbol = symbol_call;
            let totalSupply_call = async (options) => {
                let result = await this.call('totalSupply', [], options);
                return new eth_contract_7.BigNumber(result);
            };
            this.totalSupply = totalSupply_call;
            let approveParams = (params) => [params.spender, this.wallet.utils.toString(params.amount)];
            let approve_send = async (params, options) => {
                let result = await this.send('approve', approveParams(params), options);
                return result;
            };
            let approve_call = async (params, options) => {
                let result = await this.call('approve', approveParams(params), options);
                return result;
            };
            this.approve = Object.assign(approve_send, {
                call: approve_call
            });
            let burn_send = async (amount, options) => {
                let result = await this.send('burn', [this.wallet.utils.toString(amount)], options);
                return result;
            };
            let burn_call = async (amount, options) => {
                let result = await this.call('burn', [this.wallet.utils.toString(amount)], options);
                return;
            };
            this.burn = Object.assign(burn_send, {
                call: burn_call
            });
            let burnFromParams = (params) => [params.account, this.wallet.utils.toString(params.amount)];
            let burnFrom_send = async (params, options) => {
                let result = await this.send('burnFrom', burnFromParams(params), options);
                return result;
            };
            let burnFrom_call = async (params, options) => {
                let result = await this.call('burnFrom', burnFromParams(params), options);
                return;
            };
            this.burnFrom = Object.assign(burnFrom_send, {
                call: burnFrom_call
            });
            let decreaseAllowanceParams = (params) => [params.spender, this.wallet.utils.toString(params.subtractedValue)];
            let decreaseAllowance_send = async (params, options) => {
                let result = await this.send('decreaseAllowance', decreaseAllowanceParams(params), options);
                return result;
            };
            let decreaseAllowance_call = async (params, options) => {
                let result = await this.call('decreaseAllowance', decreaseAllowanceParams(params), options);
                return result;
            };
            this.decreaseAllowance = Object.assign(decreaseAllowance_send, {
                call: decreaseAllowance_call
            });
            let grantRoleParams = (params) => [this.wallet.utils.stringToBytes32(params.role), params.account];
            let grantRole_send = async (params, options) => {
                let result = await this.send('grantRole', grantRoleParams(params), options);
                return result;
            };
            let grantRole_call = async (params, options) => {
                let result = await this.call('grantRole', grantRoleParams(params), options);
                return;
            };
            this.grantRole = Object.assign(grantRole_send, {
                call: grantRole_call
            });
            let increaseAllowanceParams = (params) => [params.spender, this.wallet.utils.toString(params.addedValue)];
            let increaseAllowance_send = async (params, options) => {
                let result = await this.send('increaseAllowance', increaseAllowanceParams(params), options);
                return result;
            };
            let increaseAllowance_call = async (params, options) => {
                let result = await this.call('increaseAllowance', increaseAllowanceParams(params), options);
                return result;
            };
            this.increaseAllowance = Object.assign(increaseAllowance_send, {
                call: increaseAllowance_call
            });
            let mintParams = (params) => [params.to, this.wallet.utils.toString(params.amount)];
            let mint_send = async (params, options) => {
                let result = await this.send('mint', mintParams(params), options);
                return result;
            };
            let mint_call = async (params, options) => {
                let result = await this.call('mint', mintParams(params), options);
                return;
            };
            this.mint = Object.assign(mint_send, {
                call: mint_call
            });
            let pause_send = async (options) => {
                let result = await this.send('pause', [], options);
                return result;
            };
            let pause_call = async (options) => {
                let result = await this.call('pause', [], options);
                return;
            };
            this.pause = Object.assign(pause_send, {
                call: pause_call
            });
            let renounceRoleParams = (params) => [this.wallet.utils.stringToBytes32(params.role), params.account];
            let renounceRole_send = async (params, options) => {
                let result = await this.send('renounceRole', renounceRoleParams(params), options);
                return result;
            };
            let renounceRole_call = async (params, options) => {
                let result = await this.call('renounceRole', renounceRoleParams(params), options);
                return;
            };
            this.renounceRole = Object.assign(renounceRole_send, {
                call: renounceRole_call
            });
            let revokeRoleParams = (params) => [this.wallet.utils.stringToBytes32(params.role), params.account];
            let revokeRole_send = async (params, options) => {
                let result = await this.send('revokeRole', revokeRoleParams(params), options);
                return result;
            };
            let revokeRole_call = async (params, options) => {
                let result = await this.call('revokeRole', revokeRoleParams(params), options);
                return;
            };
            this.revokeRole = Object.assign(revokeRole_send, {
                call: revokeRole_call
            });
            let transferParams = (params) => [params.to, this.wallet.utils.toString(params.amount)];
            let transfer_send = async (params, options) => {
                let result = await this.send('transfer', transferParams(params), options);
                return result;
            };
            let transfer_call = async (params, options) => {
                let result = await this.call('transfer', transferParams(params), options);
                return result;
            };
            this.transfer = Object.assign(transfer_send, {
                call: transfer_call
            });
            let transferFromParams = (params) => [params.from, params.to, this.wallet.utils.toString(params.amount)];
            let transferFrom_send = async (params, options) => {
                let result = await this.send('transferFrom', transferFromParams(params), options);
                return result;
            };
            let transferFrom_call = async (params, options) => {
                let result = await this.call('transferFrom', transferFromParams(params), options);
                return result;
            };
            this.transferFrom = Object.assign(transferFrom_send, {
                call: transferFrom_call
            });
            let unpause_send = async (options) => {
                let result = await this.send('unpause', [], options);
                return result;
            };
            let unpause_call = async (options) => {
                let result = await this.call('unpause', [], options);
                return;
            };
            this.unpause = Object.assign(unpause_send, {
                call: unpause_call
            });
        }
    }
    MockErc20._abi = MockErc20_json_1.default.abi;
    exports.MockErc20 = MockErc20;
});
define("mock-contracts/contracts/WETH9.json.ts", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    ///<amd-module name='mock-contracts/contracts/WETH9.json.ts'/> 
    exports.default = {
        "abi": [
            { "constant": true, "inputs": [], "name": "name", "outputs": [{ "name": "", "type": "string" }], "payable": false, "stateMutability": "view", "type": "function" },
            { "constant": false, "inputs": [{ "name": "guy", "type": "address" }, { "name": "wad", "type": "uint256" }], "name": "approve", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" },
            { "constant": true, "inputs": [], "name": "totalSupply", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" },
            { "constant": false, "inputs": [{ "name": "src", "type": "address" }, { "name": "dst", "type": "address" }, { "name": "wad", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" },
            { "constant": false, "inputs": [{ "name": "wad", "type": "uint256" }], "name": "withdraw", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" },
            { "constant": true, "inputs": [], "name": "decimals", "outputs": [{ "name": "", "type": "uint8" }], "payable": false, "stateMutability": "view", "type": "function" },
            { "constant": true, "inputs": [{ "name": "", "type": "address" }], "name": "balanceOf", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" },
            { "constant": true, "inputs": [], "name": "symbol", "outputs": [{ "name": "", "type": "string" }], "payable": false, "stateMutability": "view", "type": "function" },
            { "constant": false, "inputs": [{ "name": "dst", "type": "address" }, { "name": "wad", "type": "uint256" }], "name": "transfer", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" },
            { "constant": false, "inputs": [], "name": "deposit", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function" },
            { "constant": true, "inputs": [{ "name": "", "type": "address" }, { "name": "", "type": "address" }], "name": "allowance", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" },
            { "payable": true, "stateMutability": "payable", "type": "fallback" },
            { "anonymous": false, "inputs": [{ "indexed": true, "name": "src", "type": "address" }, { "indexed": true, "name": "guy", "type": "address" }, { "indexed": false, "name": "wad", "type": "uint256" }], "name": "Approval", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "name": "src", "type": "address" }, { "indexed": true, "name": "dst", "type": "address" }, { "indexed": false, "name": "wad", "type": "uint256" }], "name": "Transfer", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "name": "dst", "type": "address" }, { "indexed": false, "name": "wad", "type": "uint256" }], "name": "Deposit", "type": "event" },
            { "anonymous": false, "inputs": [{ "indexed": true, "name": "src", "type": "address" }, { "indexed": false, "name": "wad", "type": "uint256" }], "name": "Withdrawal", "type": "event" }
        ],
        "bytecode": "60c0604052600d60808190527f577261707065642045746865720000000000000000000000000000000000000060a090815261003e91600091906100a3565b506040805180820190915260048082527f57455448000000000000000000000000000000000000000000000000000000006020909201918252610083916001916100a3565b506002805460ff1916601217905534801561009d57600080fd5b5061013e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e457805160ff1916838001178555610111565b82800160010185558215610111579182015b828111156101115782518255916020019190600101906100f6565b5061011d929150610121565b5090565b61013b91905b8082111561011d5760008155600101610127565b90565b6107688061014d6000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b8578063095ea7b31461014257806318160ddd1461018757806323b872dd146101ae5780632e1a7d4d146101e5578063313ce567146101fd57806370a082311461022857806395d89b4114610256578063a9059cbb1461026b578063d0e30db0146100ae578063dd62ed3e1461029c575b6100b66102d0565b005b3480156100c457600080fd5b506100cd61031f565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101075781810151838201526020016100ef565b50505050905090810190601f1680156101345780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014e57600080fd5b5061017373ffffffffffffffffffffffffffffffffffffffff600435166024356103cb565b604080519115158252519081900360200190f35b34801561019357600080fd5b5061019c61043e565b60408051918252519081900360200190f35b3480156101ba57600080fd5b5061017373ffffffffffffffffffffffffffffffffffffffff60043581169060243516604435610443565b3480156101f157600080fd5b506100b66004356105e3565b34801561020957600080fd5b50610212610678565b6040805160ff9092168252519081900360200190f35b34801561023457600080fd5b5061019c73ffffffffffffffffffffffffffffffffffffffff60043516610681565b34801561026257600080fd5b506100cd610693565b34801561027757600080fd5b5061017373ffffffffffffffffffffffffffffffffffffffff6004351660243561070b565b3480156102a857600080fd5b5061019c73ffffffffffffffffffffffffffffffffffffffff6004358116906024351661071f565b33600081815260036020908152604091829020805434908101909155825190815291517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9281900390910190a2565b6000805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156103c35780601f10610398576101008083540402835291602001916103c3565b820191906000526020600020905b8154815290600101906020018083116103a657829003601f168201915b505050505081565b33600081815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b303190565b73ffffffffffffffffffffffffffffffffffffffff831660009081526003602052604081205482111561047557600080fd5b73ffffffffffffffffffffffffffffffffffffffff841633148015906104eb575073ffffffffffffffffffffffffffffffffffffffff841660009081526004602090815260408083203384529091529020547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b156105655773ffffffffffffffffffffffffffffffffffffffff8416600090815260046020908152604080832033845290915290205482111561052d57600080fd5b73ffffffffffffffffffffffffffffffffffffffff841660009081526004602090815260408083203384529091529020805483900390555b73ffffffffffffffffffffffffffffffffffffffff808516600081815260036020908152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060019392505050565b336000908152600360205260409020548111156105ff57600080fd5b33600081815260036020526040808220805485900390555183156108fc0291849190818181858888f1935050505015801561063e573d6000803e3d6000fd5b5060408051828152905133917f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65919081900360200190a250565b60025460ff1681565b60036020526000908152604090205481565b60018054604080516020600284861615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156103c35780601f10610398576101008083540402835291602001916103c3565b6000610718338484610443565b9392505050565b6004602090815260009283526040808420909152908252902054815600a165627a7a7230582028e8926331b6fbc962189e19ee2a6efac438a3c6bc58098e6793d702eaef86460029"
    };
});
define("mock-contracts/contracts/WETH9.ts", ["require", "exports", "@ijstech/eth-contract", "mock-contracts/contracts/WETH9.json.ts"], function (require, exports, eth_contract_8, WETH9_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WETH9 = void 0;
    class WETH9 extends eth_contract_8.Contract {
        constructor(wallet, address) {
            super(wallet, address, WETH9_json_1.default.abi, WETH9_json_1.default.bytecode);
            this.assign();
        }
        deploy(options) {
            return this.__deploy([], options);
        }
        parseApprovalEvent(receipt) {
            return this.parseEvents(receipt, "Approval").map(e => this.decodeApprovalEvent(e));
        }
        decodeApprovalEvent(event) {
            let result = event.data;
            return {
                src: result.src,
                guy: result.guy,
                wad: new eth_contract_8.BigNumber(result.wad),
                _event: event
            };
        }
        parseTransferEvent(receipt) {
            return this.parseEvents(receipt, "Transfer").map(e => this.decodeTransferEvent(e));
        }
        decodeTransferEvent(event) {
            let result = event.data;
            return {
                src: result.src,
                dst: result.dst,
                wad: new eth_contract_8.BigNumber(result.wad),
                _event: event
            };
        }
        parseDepositEvent(receipt) {
            return this.parseEvents(receipt, "Deposit").map(e => this.decodeDepositEvent(e));
        }
        decodeDepositEvent(event) {
            let result = event.data;
            return {
                dst: result.dst,
                wad: new eth_contract_8.BigNumber(result.wad),
                _event: event
            };
        }
        parseWithdrawalEvent(receipt) {
            return this.parseEvents(receipt, "Withdrawal").map(e => this.decodeWithdrawalEvent(e));
        }
        decodeWithdrawalEvent(event) {
            let result = event.data;
            return {
                src: result.src,
                wad: new eth_contract_8.BigNumber(result.wad),
                _event: event
            };
        }
        assign() {
            let name_call = async (options) => {
                let result = await this.call('name', [], options);
                return result;
            };
            this.name = name_call;
            let totalSupply_call = async (options) => {
                let result = await this.call('totalSupply', [], options);
                return new eth_contract_8.BigNumber(result);
            };
            this.totalSupply = totalSupply_call;
            let decimals_call = async (options) => {
                let result = await this.call('decimals', [], options);
                return new eth_contract_8.BigNumber(result);
            };
            this.decimals = decimals_call;
            let balanceOf_call = async (param1, options) => {
                let result = await this.call('balanceOf', [param1], options);
                return new eth_contract_8.BigNumber(result);
            };
            this.balanceOf = balanceOf_call;
            let symbol_call = async (options) => {
                let result = await this.call('symbol', [], options);
                return result;
            };
            this.symbol = symbol_call;
            let allowanceParams = (params) => [params.param1, params.param2];
            let allowance_call = async (params, options) => {
                let result = await this.call('allowance', allowanceParams(params), options);
                return new eth_contract_8.BigNumber(result);
            };
            this.allowance = allowance_call;
            let approveParams = (params) => [params.guy, this.wallet.utils.toString(params.wad)];
            let approve_send = async (params, options) => {
                let result = await this.send('approve', approveParams(params), options);
                return result;
            };
            let approve_call = async (params, options) => {
                let result = await this.call('approve', approveParams(params), options);
                return result;
            };
            this.approve = Object.assign(approve_send, {
                call: approve_call
            });
            let transferFromParams = (params) => [params.src, params.dst, this.wallet.utils.toString(params.wad)];
            let transferFrom_send = async (params, options) => {
                let result = await this.send('transferFrom', transferFromParams(params), options);
                return result;
            };
            let transferFrom_call = async (params, options) => {
                let result = await this.call('transferFrom', transferFromParams(params), options);
                return result;
            };
            this.transferFrom = Object.assign(transferFrom_send, {
                call: transferFrom_call
            });
            let withdraw_send = async (wad, options) => {
                let result = await this.send('withdraw', [this.wallet.utils.toString(wad)], options);
                return result;
            };
            let withdraw_call = async (wad, options) => {
                let result = await this.call('withdraw', [this.wallet.utils.toString(wad)], options);
                return;
            };
            this.withdraw = Object.assign(withdraw_send, {
                call: withdraw_call
            });
            let transferParams = (params) => [params.dst, this.wallet.utils.toString(params.wad)];
            let transfer_send = async (params, options) => {
                let result = await this.send('transfer', transferParams(params), options);
                return result;
            };
            let transfer_call = async (params, options) => {
                let result = await this.call('transfer', transferParams(params), options);
                return result;
            };
            this.transfer = Object.assign(transfer_send, {
                call: transfer_call
            });
            let deposit_send = async (options) => {
                let result = await this.send('deposit', [], options);
                return result;
            };
            let deposit_call = async (options) => {
                let result = await this.call('deposit', [], options);
                return;
            };
            this.deposit = Object.assign(deposit_send, {
                call: deposit_call
            });
        }
    }
    WETH9._abi = WETH9_json_1.default.abi;
    exports.WETH9 = WETH9;
});
define("mock-contracts/contracts/index.ts", ["require", "exports", "mock-contracts/contracts/MockAMMFactory.ts", "mock-contracts/contracts/MockAMMPair.ts", "mock-contracts/contracts/MockOracleAdaptor.ts", "mock-contracts/contracts/MockOracleAdaptor3.ts", "mock-contracts/contracts/MockPriceOracle.ts", "mock-contracts/contracts/MockRouter.ts", "mock-contracts/contracts/MockErc20.ts", "mock-contracts/contracts/WETH9.ts"], function (require, exports, MockAMMFactory_1, MockAMMPair_1, MockOracleAdaptor_1, MockOracleAdaptor3_1, MockPriceOracle_1, MockRouter_1, MockErc20_1, WETH9_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WETH9 = exports.MockErc20 = exports.MockRouter = exports.MockPriceOracle = exports.MockOracleAdaptor3 = exports.MockOracleAdaptor = exports.MockAMMPair = exports.MockAMMFactory = void 0;
    Object.defineProperty(exports, "MockAMMFactory", { enumerable: true, get: function () { return MockAMMFactory_1.MockAMMFactory; } });
    Object.defineProperty(exports, "MockAMMPair", { enumerable: true, get: function () { return MockAMMPair_1.MockAMMPair; } });
    Object.defineProperty(exports, "MockOracleAdaptor", { enumerable: true, get: function () { return MockOracleAdaptor_1.MockOracleAdaptor; } });
    Object.defineProperty(exports, "MockOracleAdaptor3", { enumerable: true, get: function () { return MockOracleAdaptor3_1.MockOracleAdaptor3; } });
    Object.defineProperty(exports, "MockPriceOracle", { enumerable: true, get: function () { return MockPriceOracle_1.MockPriceOracle; } });
    Object.defineProperty(exports, "MockRouter", { enumerable: true, get: function () { return MockRouter_1.MockRouter; } });
    Object.defineProperty(exports, "MockErc20", { enumerable: true, get: function () { return MockErc20_1.MockErc20; } });
    Object.defineProperty(exports, "WETH9", { enumerable: true, get: function () { return WETH9_1.WETH9; } });
});
define("mock-contracts", ["require", "exports", "mock-contracts/contracts/index.ts"], function (require, exports, Contracts) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contracts = void 0;
    exports.Contracts = Contracts;
});
